// Test ValueArray
log("ValueArray:")
log()

log("const arr[10] = [10, 20, [30, 40]]")
const arr[10] = {10, 20, [30, 40]}

log("arr[2][0]: ", arr[2][0])
log()

log("Before appending with resizing: ", arr)
for (let i = 0; i < 10; i++) {
  if (arr->length() + 1 > arr->cap()) {
    arr->resize(arr->cap() + 1)
  }
  arr->append(i)
}
log("After: ", arr)



log()
log()
log()



log('let arr2[10] = [10, [20, "foo"], "bar"]')
let arr2[10] = {10, [20, "foo"], "bar"}

log("arr2[1][1]: ", arr2[1][1])
log()

log("let arr3[20]")
let arr3[20]
log("arr3: ", arr3)
log("arr3->getClass(): ", arr3->getClass())
log("arr3->cap(): ", arr3->cap())
log("arr3->append({ten: 10})")
arr3->append({ten: 10})
log("arr3: ", arr3)



log()
log()
log()



log("Array reassignment at an index:")
log("arr[0] = 12")
arr[0] = 12
log("arr: ", arr)
log()

log('arr2[2] = "baz"')
arr2[2] = "baz"
log("arr2: ", arr2)
log()

log("arr3[0].ten = 13")
arr3[0].ten = 13
log("arr3: ", arr3)
log()



log()
log()
log()



log("Shorthand reassignments on arrays:")
log("arr[0] -= 2")
arr[0] -= 2
log("arr: ", arr)
log()

log("arr2[1][0] *= 1.5")
arr2[1][0] *= 1.5
log("arr2: ", arr2)
log()

log("arr3[0].ten /= 4")
arr3[0].ten /= 4
log("arr3: ", arr3)



log()
log()
log()



log("Increment/decrement array values:")
log("arr[1]++: ", arr[1]++)
log("arr: ", arr)
log()

log("--arr2[1][0]: ", --arr2[1][0])
log("arr2: ", arr2)
log()

log("arr3[0].ten--: ", arr3[0].ten--)
log("arr3: ", arr3)
log()

log('++arr3[0]["ten"]: ', ++arr3[0]["ten"])
log("arr3: ", arr3)



log()
log()
log()



log("Declaring/defining arrays without specifying the capacity explicitly:")
log('const arr5[] = {100, 200, 300, "four", {five: 5}, [6, 7]}')
const arr5[] = {100, 200, 300, "four", {five: 5}, [6, 7]}
log("arr5: ", arr5)
log("arr5->cap(): ", arr5->cap())
log()

log('let arr6[] = {{five: 5}, [6, 7], 100, 200, 300, "four"}')
let arr6[] = {{five: 5}, [6, 7], 100, 200, 300, "four"}
log("arr6: ", arr6)
log("arr6->cap(): ", arr6->cap())
log()

log("let arr7[]")
let arr7[]
log("arr7: ", arr7)
log("arr7->cap(): ", arr7->cap())
