// Test anonymous objects
log("Anonymous object initialisation and accessing:")
let obj = {
	num: 999,
	str: "Hi"
}
log("obj.num: ", obj.num)
log()
log("obj.str: ", obj.str)
log()


log("----------------------------")


log("Nested objects:")
log()
let obj2 = {
	nested: {
		num2: {
			nines: 9999999
		},
		str2: "Hello"
	},
	test: "test"
}
log("obj2.nested.str2: ", obj2.nested.str2)
log()
log("obj2.nested.num2.nines: ", obj2.nested.num2.nines)
log()


log("----------------------------")


log("Key-value pairs reassignment:")
log()
log("obj.num = 33")
obj.num = 33
log("obj.num: ", obj.num)
log()
log("obj2.nested.str2 = Very nice!")
obj2.nested.str2 = "Very nice!"
log("obj2.nested.str2: ", obj2.nested.str2)
log()


log("----------------------------")


log("Functions in objects:")
log()
let obj3 = {
	fn1: function(a) {
		return a + 1
	},
	nested: {
		fn2: (x) => {
			return x * 2
		}
	}
}
log("obj3.fn1(5): ")
log(obj3.fn1(5))
log()

log("obj3.nested.fn2(10)")
log(obj3.nested.fn2(10))
log()


log("----------------------------")


log("Square-notation:");
log();

log('obj3["nested"]: ', obj3["nested"]);
log('const nest = "nested";')
const nest = "nested";
log('obj3[nest]: ', obj3[nest]);
log();

log("obj3[nest].fn2(10): ", obj3[nest].fn2(10));
log('obj3[nest]["fn2"](10): ', obj3[nest]["fn2"](10));
log('const alias = "fn2";')
const alias = "fn2";
log("obj3[nest][alias](10): ", obj3[nest][alias](10));
