// Test ValueList
log("ValueList:")
log()

let list1 = ["hello 1", 1, {num: 55}]
log("list1: ", list1)
log("list1[0]: ", list1[0])
log("list1[2].num: ", list1[2].num)
log()


let nestedList = { list2: ["hello 2", 2, 3, 4, {deep: 777}] }
log("nestedList: ", nestedList)
log("nestedList.list2[4].deep: ", nestedList.list2[4].deep)
log()


let list3 = [100, 200, 300]
log("list3: ", list3)
list3[1] = 888
log("list3[1] = 888")
log("list3: ", list3)
log()


log()
log()


log("ValueList prototype functions:")
let listProto = [0]
let listProto2 = [1, 111]
let listProto3 = [33, [40, 50]]
let temp = 14
let testFn = (x) => {
	return x
}

for (let i = 0; i < 5; i = i + 1) {
	listProto->append(10 <= 2)
	listProto->append(2)
	listProto->append(listProto2)
	listProto->append("temp")
	listProto->append(temp)
	listProto->append(10 + 10 * 4)
	listProto->append(testFn(777))
	listProto->append(list3[0])

	log(listProto)
	log()
}

log()

log("listProto3[1]->append(1300)")
listProto3[1]->append(1300)
log("listProto3: ", listProto3)


log()
log()


log("Invoke ValueFn inside of ValueList:")
let listFn = [13, (x) => {return x * 10}, 77]
log("listFn: ", listFn)
log("listFn[1](7): ", listFn[1](7))
